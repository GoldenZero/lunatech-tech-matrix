This is your new Play application
=================================

POSTMAN collection: https://www.getpostman.com/collections/706a41a2f031e0217331
the link will be updated when there's a change in the collection


/********************

Added feature tests for controller.
Basically it's an end-to-end test of the backend, because the DAO layer is not mocked.

However, THERE IS A PROBLEM.

The test run, but the database is not configured properly.
In order to run the tests, you HAVE to create the database and the tables YOURSELF.
This has to be fixed, I do not know how yet. An in-memory db should be a solution,
but I did not manage to configure it :(

Also I cannot split the tests in different files, because I get an error:
java.util.concurrent.RejectedExecutionException: Task slick.backend.DatabaseComponent$DatabaseDef$$anon$2@684106dd
rejected from java.util.concurrent.ThreadPoolExecutor@3d2cfb81
[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 13]

The tests will be merged, but the configuration MUST be fixed !!!


Also, two tests are failing because the controllers must be changed.

RUNNING FROM CONSOLE
You can use `sbt acc:test` command to run from console only the acceptance tests,
or `sbt test` to run all the tests

**********************/

DATA MODEL

In the application we have a few entities we use. The names might be at first confusing,
but hey, at least it's not NewModel1 and NewModel2 :D

User:
    id
    firstName
    lastName
    email


Tech:
    id
    name
    techType

Skill:
    id
    userId
    techId
    skillLevel

In our database we have 3 main tables: users, tech and user_skills.
The third table is just a holder of userId, techId and the level.
When the users introduces a skill to his list, the properties of the skill (the name and type) are stored in the Tech table, and therefore form the tech body.
We store it in the Tech table so that this particular skill will be available for other users as well (autocomplete)

So the difference between the Tech and Skill is that the tech represents the technical knowledge a user has,
and the skill is just a holder of the techId & userId and the level that user has about that skill.

How it looks in the database:

Users:

id      | firstName | lastName  | email
-----------------------------------------
1       | Tanya     | Moldovan  | tanya.moldovan@lunatech.com
2       | Severus   | Snape     | severus.snape@hogwarts.com


Tech:

id      | name      | type
---------------------------
1       | Scala     | LANGUAGE
2       | Dark Arts | CONCEPTUAL

Skill:

id      | userId    | techId    | skillLevel
---------------------------------------------
1       | 1         | 1         | COMFORTABLE
2       | 2         | 2         | CAN_TEACH



We also have intermediate models that help to either intercept correctly the parameters in the controller or to hold the results needed.

SkillMatrixItem:
    Tech
    SkillLevel

This is used in the POST a users makes in order to add a skill to his list. It looks like this:

{
	"tech": {
		"name": "Prolog",
		"techType": "LANGUAGE"
	},
	"skillLevel": "DABBED"
}

At the moment of writing, we haven't found yet a way on how to validate that the request contains 2 objects (tech and skillLevel),
hence we create an intermediate case class that will hold these two objects.

We also have two response models. These are used to create correctly the results of some GET requests, because we mix the data from 2 or 3 tables in one response.

SkillMatrixResponse:
    techId
    techName
    techType
    users: Seq[skillMatrixUsersAndLevel] // maybe the name is not that good, but no inspiration has come to us

SkillMatrixUsersAndLevel:
    userName // this is the first and last name combined together
    level

This looks like this:

{
      "techId": 7,
      "techName": "Defense Against the Dark Arts",
      "techType": "CONCEPTUAL",
      "users": [
        {
          "userName": "Severus Snape",
          "level": "CAN_TEACH"
        },
         {
           "userName": "Dolores Umbridge",
            "level": "DABBED"
         }
      ]
}


UserSkillResponse:
    userId
    firstName
    lastName
    skills: Seq[SkillMatrixItem]

{
    "userId": 4,
    "firstName": "Severus",
    "lastName": "Snape",
    "skill": [
      {
        "tech": {
          "id": 7,
          "name": "Dark Arts",
          "techType": "CONCEPTUAL"
        },
        "skillLevel": "CAN_TEACH"
      },
      {
        "tech": {
          "id": 8,
          "name": "Defense agains the Dark Arts",
          "techType": "CONCEPTUAL"
        },
        "skillLevel": "CAN_TEACH"
      }
    ]
}


********************/
TO DO:

Current API modification:
- Slick Evolutions are not working :(
- add documentation (comments)s
- prettify README


New stuff:
- generate db schema

******** REALLY IMPORTANT ***********
- not having local database anymore
- user authentication
- front end : polymer application
https://www.polymer-project.org
*************************************

Good to have:
- logging ???
- jenkins builds ? talk to Erik
- if you have ideas on how to improve the code, feel free to do it!
- new features